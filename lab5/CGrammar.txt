<character>: 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_'
<id_end>:
| <character><id_end>
<identifier>: <character><id_end>
<digit>: '0' | '1' | '2' | '3' | '4' |  '5' | '6' | '7' | '8' | '9'
<number_end>:
  | <digit><number_end>
<number>: <digit><number_end>
<expression>: <term> <expression_end>
<expression_end>:
| '+' <expression>
| '-' <expression>
<term>: <factor> <term_end>
<term_end>:
| '*' <term>
| '/' <term>
<factor>: <identifier> | <number> | '('<expression>')'
<relop>:  '<' | '>' | '==' | '!='
<bool_composite>: <bool_expression> <bool_composite_end>
<bool_composite_end>: 
| <binop> <bool_expression> <bool_composite_end>
<binop>: 'and'|'or'
<bool_expression>: <expression>   <relop>    <expression>
<assign>: <identifier> '=' <expression> ';'
<string>: '"'
<print>: 'print' <string_or_expr> <print_end> ';'
<print_end>:
| ',' <string_or_expr> <print_end>
<string_or_expr>: <string> | <expression>
<scan>: 'scan' <identifier> ';'
<for>: 'for' <identifier> '=' <expression> 'to' <expression>
<if>: 'if' <bool_composite>
<else>: 
| 'else' '{' <statement> '}'
<statement>:  
  | <print> <statement>
  | <scan> <statement>
  | <assign> <statement>
  | <for>  '{' <statement> '}' <statement>
  | <if>  '{' <statement> '}' <else> <statement>
<program>: <statement>
